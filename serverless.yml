service: cert-transparency

custom:
  awsRegion: ${file(infra/config.json):aws_region}
  bucketName: ${file(infra/config.json):bucket_name}
  dbTableName: ${file(infra/config.json):dynamodb_table_name}
  query_que_arn: ${file(infra/config.json):query_queue_arn}
  db_read_queue_arn: ${file(infra/config.json):db_read_queue_arn}
  tldCacheFile: "/opt/python/tldextract/.tld_set_snapshot"  # this allows tldextract to use built-in snapshot

plugins:
  # Plugin to allow IAM role per function rather than per service
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.awsRegion}
  versionFunctions: false
  logRetentionInDays: 1

functions:
  query_logs:
    handler: query_logs.query_to_db
    timeout: 240
    memorySize: 2048
    layers:
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-aiohttp:4
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-pyOpenSSL:1
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-tldextract:1
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-construct:1
    environment:
      bucket_name: ${self:custom.bucketName}
      db_table_name: ${self:custom.dbTableName}
      TLDEXTRACT_CACHE: ${self:custom.tldCacheFile}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      - dynamodb:BatchWriteItem
      Resource:
        Fn::Join:
        - ""
        - - "arn:aws:dynamodb:"
          - ${self:custom.awsRegion}
          - ":"
          - { Ref: "AWS::AccountId" }
          - ":table/"
          - ${self:custom.dbTableName}
    - Effect: Allow
      Action:
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      - sqs:GetQueueAttributes
      Resource: ${self:custom.query_que_arn}
    events:
    - sqs:
        arn: ${self:custom.query_que_arn}
        batchSize: 1
    reservedConcurrency: 10
  ### Query DB #####
  query_db:
    handler: query_db.main
    timeout: 9
    memorySize: 128
    environment:
      bucket_name: ${self:custom.bucketName}
      db_table_name: ${self:custom.dbTableName}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      - s3:DeleteObject
      - s3:PutObjectAcl
      - s3:GetObjectAcl  # ACL permissions required for file_upload
      - s3:AbortMultipartUpload
      Resource:
        Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - ${self:custom.bucketName}
          - "/*"
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:BatchGetItem
      - dynamodb:Scan
      Resource:
        Fn::Join:
        - ""
        - - "arn:aws:dynamodb:"
          - ${self:custom.awsRegion}
          - ":"
          - { Ref: "AWS::AccountId" }
          - ":table/"
          - ${self:custom.dbTableName}
    - Effect: Allow
      Action:
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      - sqs:GetQueueAttributes
      Resource: ${self:custom.db_read_queue_arn}
    events:
    - sqs:
        arn: ${self:custom.db_read_queue_arn}
        batchSize: 1
    reservedConcurrency: 30

package:
  exclude:
    - node_modules/**
    - .serverless
    - venv/**
    - package.json
    - package-lock.json
    - .gitignore
    - requirements.txt
    - test.json
    - infra/**
    - __pychache__/**
    - .idea/**
    - config.json
    - client/**