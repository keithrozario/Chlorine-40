service: cert-transparency

plugins:
  # Plugin to allow IAM role per function rather than per service
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'default'}
  region: ${file(../infra/terraform.tfvars.json):aws_region.${self:provider.stage}}
  versionFunctions: false
  logRetentionInDays: 1

custom:
  awsRegion: ${self:provider.region}

  # environment variables
  s3DomainsName: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_domains}
  s3DomainsArn: ${ssm:/${self:service.name}/${self:provider.stage}/s3bucket_domains_arn}
  dbTempName: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_temp_table}
  dbTempArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_temp_table_arn}
  dbStatusName: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_status_table}
  dbStatusArn: ${ssm:/${self:service.name}/${self:provider.stage}/dynamodb_status_table_arn}
  sqsQueryLogsArn: ${ssm:/${self:service.name}/${self:provider.stage}/sqs_query_logs_arn}
  sqsQueryDbArn: ${ssm:/${self:service.name}/${self:provider.stage}/sqs_query_db_arn}
  # this allows tldextract to use built-in snapshot
  tldCacheFile: "/opt/python/tldextract/.tld_set_snapshot"

functions:
  # Query Logs
  query_logs:
    description: Query the certs from the Certificate Transparency Logs
    handler: query_logs.query_to_db
    timeout: 240
    memorySize: 2048
    layers:
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-aiohttp:4
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-pyOpenSSL:1
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-tldextract:1
      - arn:aws:lambda:${self:custom.awsRegion}:113088814899:layer:Klayers-python37-construct:1
    environment:
      db_table_name: ${self:custom.dbTempName}
      db_status_name: ${self:custom.dbStatusName}
      TLDEXTRACT_CACHE: ${self:custom.tldCacheFile}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      - dynamodb:BatchWriteItem
      Resource: ${self:custom.dbTempArn}
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      Resource: ${self:custom.dbStatusArn}
    - Effect: Allow
      Action:
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      - sqs:GetQueueAttributes
      Resource: ${self:custom.sqsQueryLogsArn}
    events:
    - sqs:
        arn: ${self:custom.sqsQueryLogsArn}
        batchSize: 1
    reservedConcurrency: 10
  ### Query DB #####
  query_db:
    description: Query the records from DynamoDB temp table, and update final domain files
    handler: query_db.main
    timeout: 30
    memorySize: 256
    environment:
      bucket_name: ${self:custom.s3DomainsName}
      db_table_name: ${self:custom.dbTempName}
    iamRoleStatements:
    - Effect: Allow
      Action:
      - s3:PutObject
      - s3:GetObject
      - s3:DeleteObject
      - s3:PutObjectAcl
      - s3:GetObjectAcl
      - s3:AbortMultipartUpload
      Resource: ${self:custom.s3DomainsArn}/*
    - Effect: Allow
      Action:
      - s3:ListBucket
      Resource: ${self:custom.s3DomainsArn}
    - Effect: Allow
      Action:
      - dynamodb:Query
      - dynamodb:BatchGetItem
      - dynamodb:Scan
      Resource: ${self:custom.dbTempArn}
    - Effect: Allow
      Action:
      - sqs:ReceiveMessage
      - sqs:DeleteMessage
      - sqs:GetQueueAttributes
      Resource: ${self:custom.sqsQueryDbArn}
    events:
    - sqs:
        arn: ${self:custom.sqsQueryDbArn}
        batchSize: 1
    reservedConcurrency: 30

# don't package these files
package:
  exclude:
    - node_modules/**
    - .serverless/**
    - venv/**
    - client/**
    - infra/**
    - __pychache__/**
    - .idea/**
    - package.json
    - package-lock.json
    - .gitignore
    - requirements.txt
